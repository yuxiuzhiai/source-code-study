ChannelPipeline

注释

	就是一系列的用于处理或者拦截inbound或outbound操作的ChannelHandler

	 *                                                 I/O Request
	 *                                            via {@link Channel} or
	 *                                        {@link ChannelHandlerContext}
	 *                                                      |
	 *  +---------------------------------------------------+---------------+
	 *  |                           ChannelPipeline         |               |
	 *  |                                                  \|/              |
	 *  |    +---------------------+            +-----------+----------+    |
	 *  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |              /|\                                  |               |
	 *  |               |                                  \|/              |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |              /|\                                  .               |
	 *  |               .                                   .               |
	 *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|
	 *  |        [ method call]                       [method call]         |
	 *  |               .                                   .               |
	 *  |               .                                  \|/              |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |              /|\                                  |               |
	 *  |               |                                  \|/              |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |
	 *  |    +----------+----------+            +-----------+----------+    |
	 *  |              /|\                                  |               |
	 *  +---------------+-----------------------------------+---------------+
	 *                  |                                  \|/
	 *  +---------------+-----------------------------------+---------------+
	 *  |               |                                   |               |
	 *  |       [ Socket.read() ]                    [ Socket.write() ]     |
	 *  |                                                                   |
	 *  |  Netty Internal I/O Threads (Transport Implementation)            |
	 *  +-------------------------------------------------------------------+

接口定义

	public interface ChannelPipeline
        extends ChannelInboundInvoker, ChannelOutboundInvoker, Iterable<Entry<String, ChannelHandler>> {

        ChannelPipeline addFirst(String name, ChannelHandler handler);

        ChannelPipeline addFirst(EventExecutorGroup group, String name, ChannelHandler handler);

        ChannelPipeline addLast(String name, ChannelHandler handler);

        ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler);

        ChannelPipeline addBefore(String baseName, String name, ChannelHandler handler);

        ChannelPipeline addBefore(EventExecutorGroup group, String baseName, String name, ChannelHandler handler);

        ChannelPipeline addAfter(String baseName, String name, ChannelHandler handler);

        ChannelPipeline addAfter(EventExecutorGroup group, String baseName, String name, ChannelHandler handler);

        ChannelPipeline addFirst(ChannelHandler... handlers);

        ChannelPipeline addFirst(EventExecutorGroup group, ChannelHandler... handlers);

        ChannelPipeline addLast(ChannelHandler... handlers);

        ChannelPipeline addLast(EventExecutorGroup group, ChannelHandler... handlers);

        ChannelPipeline remove(ChannelHandler handler);

        ChannelHandler remove(String name);

        <T extends ChannelHandler> T remove(Class<T> handlerType);

        ChannelHandler removeFirst();

        ChannelHandler removeLast();

        ChannelPipeline replace(ChannelHandler oldHandler, String newName, ChannelHandler newHandler);

        ChannelHandler replace(String oldName, String newName, ChannelHandler newHandler);

        <T extends ChannelHandler> T replace(Class<T> oldHandlerType, String newName,
                                             ChannelHandler newHandler);

        ChannelHandler first();

        ChannelHandlerContext firstContext();

        ChannelHandler last();

        ChannelHandlerContext lastContext();

        ChannelHandler get(String name);

        <T extends ChannelHandler> T get(Class<T> handlerType);

        ChannelHandlerContext context(ChannelHandler handler);

        ChannelHandlerContext context(String name);

        ChannelHandlerContext context(Class<? extends ChannelHandler> handlerType);

        Channel channel();

        List<String> names();

        Map<String, ChannelHandler> toMap();

        @Override
        ChannelPipeline fireChannelRegistered();

         @Override
        ChannelPipeline fireChannelUnregistered();

        @Override
        ChannelPipeline fireChannelActive();

        @Override
        ChannelPipeline fireChannelInactive();

        @Override
        ChannelPipeline fireExceptionCaught(Throwable cause);

        @Override
        ChannelPipeline fireUserEventTriggered(Object event);

        @Override
        ChannelPipeline fireChannelRead(Object msg);

        @Override
        ChannelPipeline fireChannelReadComplete();

        @Override
        ChannelPipeline fireChannelWritabilityChanged();

        @Override
        ChannelPipeline flush();
    }

子类

	DefaultChannelPipeline:
		ChannelPipeline的默认实现