ByteBufAllocator

注释

	负责分配buffer
	这个接口的实现应该是线程安全的

接口定义

	public interface ByteBufAllocator {

	    ByteBufAllocator DEFAULT = ByteBufUtil.DEFAULT_ALLOCATOR;

	    /**
	     * Allocate a {@link ByteBuf}. If it is a direct or heap buffer
	     * depends on the actual implementation.
	     */
	    ByteBuf buffer();

	    /**
	     * Allocate a {@link ByteBuf} with the given initial capacity.
	     * If it is a direct or heap buffer depends on the actual implementation.
	     */
	    ByteBuf buffer(int initialCapacity);

	    /**
	     * Allocate a {@link ByteBuf} with the given initial capacity and the given
	     * maximal capacity. If it is a direct or heap buffer depends on the actual
	     * implementation.
	     */
	    ByteBuf buffer(int initialCapacity, int maxCapacity);

	    /**
	     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O.
	     */
	    ByteBuf ioBuffer();

	    /**
	     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O.
	     */
	    ByteBuf ioBuffer(int initialCapacity);

	    /**
	     * Allocate a {@link ByteBuf}, preferably a direct buffer which is suitable for I/O.
	     */
	    ByteBuf ioBuffer(int initialCapacity, int maxCapacity);

	    /**
	     * Allocate a heap {@link ByteBuf}.
	     */
	    ByteBuf heapBuffer();

	    /**
	     * Allocate a heap {@link ByteBuf} with the given initial capacity.
	     */
	    ByteBuf heapBuffer(int initialCapacity);

	    /**
	     * Allocate a heap {@link ByteBuf} with the given initial capacity and the given
	     * maximal capacity.
	     */
	    ByteBuf heapBuffer(int initialCapacity, int maxCapacity);

	    /**
	     * Allocate a direct {@link ByteBuf}.
	     */
	    ByteBuf directBuffer();

	    /**
	     * Allocate a direct {@link ByteBuf} with the given initial capacity.
	     */
	    ByteBuf directBuffer(int initialCapacity);

	    /**
	     * Allocate a direct {@link ByteBuf} with the given initial capacity and the given
	     * maximal capacity.
	     */
	    ByteBuf directBuffer(int initialCapacity, int maxCapacity);

	    /**
	     * Allocate a {@link CompositeByteBuf}.
	     * If it is a direct or heap buffer depends on the actual implementation.
	     */
	    CompositeByteBuf compositeBuffer();

	    /**
	     * Allocate a {@link CompositeByteBuf} with the given maximum number of components that can be stored in it.
	     * If it is a direct or heap buffer depends on the actual implementation.
	     */
	    CompositeByteBuf compositeBuffer(int maxNumComponents);

	    /**
	     * Allocate a heap {@link CompositeByteBuf}.
	     */
	    CompositeByteBuf compositeHeapBuffer();

	    /**
	     * Allocate a heap {@link CompositeByteBuf} with the given maximum number of components that can be stored in it.
	     */
	    CompositeByteBuf compositeHeapBuffer(int maxNumComponents);

	    /**
	     * Allocate a direct {@link CompositeByteBuf}.
	     */
	    CompositeByteBuf compositeDirectBuffer();

	    /**
	     * Allocate a direct {@link CompositeByteBuf} with the given maximum number of components that can be stored in it.
	     */
	    CompositeByteBuf compositeDirectBuffer(int maxNumComponents);

	    /**
	     * Returns {@code true} if direct {@link ByteBuf}'s are pooled
	     */
	    boolean isDirectBufferPooled();

	    /**
	     * Calculate the new capacity of a {@link ByteBuf} that is used when a {@link ByteBuf} needs to expand by the
	     * {@code minNewCapacity} with {@code maxCapacity} as upper-bound.
	     */
	    int calculateNewCapacity(int minNewCapacity, int maxCapacity);
	 }

子类

	AbstractByteBufAllocator

	PooledByteBufAllocator

	UnpooledByteBufAllocator

	PreferHeapByteBufAllocator:
		包装其他ByteBufAllocator,使用head-buffer除非显式需要direct buffer