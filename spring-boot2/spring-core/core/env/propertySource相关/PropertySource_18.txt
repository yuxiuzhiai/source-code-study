PropertySource

抽象类注释

    代表键值对来源的抽象基类。其getSource()方法的返回值会是任何类型的properties封装,比如:java.util.Properties/java.util.Map/ServletContext/ServletConfig.PropertySource一般不会单独使用,而是通过PropertySources对象,其是PropertySource对象的聚合,并且会结合PropertyResolver来执行有先后关系的属性查找

抽箱子类

    EnumerablePropertySource
    CommandLinePropertySource

子类(14)

    AnsiPropertySource:
        PropertyResolver for AnsiStyle,AnsiColor,AnsiBackground.继承于PropertySource<AnsiElement>
    
    MapPropertySource:
        从Map中读取key value的PropertySource
    
    SimpleCommandLinePropertySource:
        继承自抽象类CommandLinePropertySource,CommandLinePropertySource又是继承自EnumerablePropertySource
        解析命令行参数.命令行参数可以分为两组:
        option arguments:以"--"开头,形如:--key[=value],=前后不能有空格
        non-option arguments:CommandLinePropertySource有个特殊的key用于代表非-/--开头的参数:nonOptionArgs

    RandomValuePropertySource:
        对于random.开头的属性,返回一个随机值
            random.int -> 返回一个int
            random.long -> 返回一个long
                       -> 返回byte[]

    SystemEnvironmentPropertySource:
        MapPropertySource的特别设计,用于补偿bash或其他shell不允许使用./-字符的限制.也支持property name的大写形式.
        比如getProperty("foo.bar"),会以如下的propertyName去查找:
            foo.bar
            foo_bar
            FOO.BAR
            FOO_BAR

    ServletContextPropertySource:
        从ServletContext读取init parameters的PropertySource

    ServletConfigPropertySource:
        从ServletConfig读取init parameters的PropertySource

    PropertiesPropertySource:
        继承自MapPropertySource,从java.util.Properties中抽取属性的PropertySource

    ResourcePropertySource:
        继承自PropertiesPropertySource

    OriginTrackedMapPropertySource:

    ConfigurationPropertySourcesPropertySource:
        暴露了ConfigurationPropertySource实例的PropertySource,因为它可以和PropertyResolver一起使用或者加入到Environment中

    CompositePropertySource:
        复合PropertySource,在一个PropertySource集合中迭代

    JOptCommandLinePropertySource
    JndiPropertySource

@PropertySource

注解注释
    
    提供一个便捷的方式来将PropertySource加入到Environment中,和@Configuration一起用

